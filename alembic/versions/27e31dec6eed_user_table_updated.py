"""user table updated

Revision ID: 27e31dec6eed
Revises: f38396d6a1d7
Create Date: 2025-05-27 16:29:56.225642

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql
import uuid
from alembic import op
import sqlalchemy as sa
from sqlalchemy import text, inspect

# revision identifiers, used by Alembic.
revision: str = '27e31dec6eed'
down_revision: Union[str, None] = 'f38396d6a1d7'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()


    # 문자열 SQL 실행 시에는 반드시 text() 사용
    conn.execute(text("""
        UPDATE users
        SET username = nickname
        WHERE nickname IS NOT NULL AND nickname != ''
    """))

    # Step 3: 비어 있는 username에는 UUID 같은 랜덤값 넣기
    users = conn.execute(text("SELECT id FROM users WHERE username IS NULL OR username = ''")).fetchall()
    for user in users:
        random_username = f"user_{uuid.uuid4().hex[:12]}"
        conn.execute(
            sa.text("UPDATE users SET username = :username WHERE id = :id"),
            {"username": random_username, "id": user.id}
        )

    # Step 4: username을 nullable=False 로 변경
    op.alter_column('users', 'username',  existing_type=sa.String(length=50), nullable=False)

    # Step 5: 제약 조건 추가
    conn = op.get_bind()
    inspector = inspect(conn)

    indexes = [ix["name"] for ix in inspector.get_indexes("users")]
    if "nickname" in indexes:
        op.drop_index('nickname', table_name='users')
    op.create_unique_constraint(None, 'users', ['username'])
    op.create_foreign_key(None, 'users', 'files', ['profile_file_id'], ['id'])
    op.drop_column('users', 'nickname')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('nickname', mysql.VARCHAR(length=50), nullable=False))
    op.drop_constraint(None, 'users', type_='foreignkey')
    op.drop_constraint(None, 'users', type_='unique')
    op.create_index('nickname', 'users', ['nickname'], unique=True)
    op.drop_column('users', 'profile_file_id')
    op.drop_column('users', 'password')
    op.drop_column('users', 'username')
    # ### end Alembic commands ###
